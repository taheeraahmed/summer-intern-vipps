// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AgreementUpdateBody agreement update body
//
// swagger:model AgreementUpdateBody
type AgreementUpdateBody struct {

	// amount
	Amount *int64 `json:"amount,omitempty"`

	// interval count
	IntervalCount *int64 `json:"intervalCount,omitempty"`

	// interval unit
	// Enum: [WEEK MONTH YEAR]
	IntervalUnit *string `json:"intervalUnit,omitempty"`

	// payment day
	PaymentDay *int64 `json:"paymentDay,omitempty"`

	// status
	// Enum: [ACTIVE PAUSED STOPPED]
	Status *string `json:"status,omitempty"`
}

// Validate validates this agreement update body
func (m *AgreementUpdateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIntervalUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agreementUpdateBodyTypeIntervalUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WEEK","MONTH","YEAR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agreementUpdateBodyTypeIntervalUnitPropEnum = append(agreementUpdateBodyTypeIntervalUnitPropEnum, v)
	}
}

const (

	// AgreementUpdateBodyIntervalUnitWEEK captures enum value "WEEK"
	AgreementUpdateBodyIntervalUnitWEEK string = "WEEK"

	// AgreementUpdateBodyIntervalUnitMONTH captures enum value "MONTH"
	AgreementUpdateBodyIntervalUnitMONTH string = "MONTH"

	// AgreementUpdateBodyIntervalUnitYEAR captures enum value "YEAR"
	AgreementUpdateBodyIntervalUnitYEAR string = "YEAR"
)

// prop value enum
func (m *AgreementUpdateBody) validateIntervalUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agreementUpdateBodyTypeIntervalUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AgreementUpdateBody) validateIntervalUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.IntervalUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateIntervalUnitEnum("intervalUnit", "body", *m.IntervalUnit); err != nil {
		return err
	}

	return nil
}

var agreementUpdateBodyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","PAUSED","STOPPED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agreementUpdateBodyTypeStatusPropEnum = append(agreementUpdateBodyTypeStatusPropEnum, v)
	}
}

const (

	// AgreementUpdateBodyStatusACTIVE captures enum value "ACTIVE"
	AgreementUpdateBodyStatusACTIVE string = "ACTIVE"

	// AgreementUpdateBodyStatusPAUSED captures enum value "PAUSED"
	AgreementUpdateBodyStatusPAUSED string = "PAUSED"

	// AgreementUpdateBodyStatusSTOPPED captures enum value "STOPPED"
	AgreementUpdateBodyStatusSTOPPED string = "STOPPED"
)

// prop value enum
func (m *AgreementUpdateBody) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agreementUpdateBodyTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AgreementUpdateBody) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this agreement update body based on context it is used
func (m *AgreementUpdateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AgreementUpdateBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgreementUpdateBody) UnmarshalBinary(b []byte) error {
	var res AgreementUpdateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
