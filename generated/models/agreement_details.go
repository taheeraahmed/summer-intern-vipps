// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AgreementDetails agreement details
//
// swagger:model AgreementDetails
type AgreementDetails struct {

	// agreement Url
	AgreementURL string `json:"agreementUrl"`

	// amount
	Amount int64 `json:"amount"`

	// customer Id
	CustomerID int64 `json:"customerId"`

	// interval count
	IntervalCount int64 `json:"intervalCount"`

	// interval unit
	IntervalUnit string `json:"intervalUnit"`

	// logo Url
	LogoURL string `json:"logoUrl"`

	// payment day
	PaymentDay int64 `json:"paymentDay"`

	// recurring agreement Id
	RecurringAgreementID int64 `json:"recurringAgreementId"`

	// sales unit
	SalesUnit string `json:"salesUnit"`

	// start date
	// Format: date
	StartDate strfmt.Date `json:"startDate"`

	// status
	Status string `json:"status"`

	// status change time
	// Format: datetime
	StatusChangeTime strfmt.DateTime `json:"statusChangeTime"`

	// vippsnummer
	Vippsnummer int64 `json:"vippsnummer"`
}

// Validate validates this agreement details
func (m *AgreementDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusChangeTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgreementDetails) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AgreementDetails) validateStatusChangeTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusChangeTime) { // not required
		return nil
	}

	if err := validate.FormatOf("statusChangeTime", "body", "datetime", m.StatusChangeTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this agreement details based on context it is used
func (m *AgreementDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AgreementDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgreementDetails) UnmarshalBinary(b []byte) error {
	var res AgreementDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
