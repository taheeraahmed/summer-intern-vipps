// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Agreement agreement
//
// swagger:model Agreement
type Agreement struct {

	// agreement Url
	AgreementURL string `json:"agreementUrl,omitempty"`

	// amount
	Amount int64 `json:"amount,omitempty"`

	// customer Id
	CustomerID int64 `json:"customerId,omitempty"`

	// interval count
	IntervalCount int64 `json:"intervalCount,omitempty"`

	// interval unit
	// Enum: [WEEK MONTH YEAR]
	IntervalUnit string `json:"intervalUnit,omitempty"`

	// payment day
	PaymentDay int64 `json:"paymentDay,omitempty"`

	// recurring agreement Id
	RecurringAgreementID int64 `json:"recurringAgreementId,omitempty"`

	// start date
	// Format: date
	StartDate strfmt.Date `json:"startDate,omitempty"`

	// status
	// Enum: [ACTIVE PAUSED STOPPED]
	Status string `json:"status,omitempty"`

	// status change time
	// Format: datetime
	StatusChangeTime strfmt.DateTime `json:"statusChangeTime,omitempty"`

	// vippsnummer
	Vippsnummer int64 `json:"vippsnummer,omitempty"`
}

// Validate validates this agreement
func (m *Agreement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIntervalUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusChangeTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agreementTypeIntervalUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WEEK","MONTH","YEAR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agreementTypeIntervalUnitPropEnum = append(agreementTypeIntervalUnitPropEnum, v)
	}
}

const (

	// AgreementIntervalUnitWEEK captures enum value "WEEK"
	AgreementIntervalUnitWEEK string = "WEEK"

	// AgreementIntervalUnitMONTH captures enum value "MONTH"
	AgreementIntervalUnitMONTH string = "MONTH"

	// AgreementIntervalUnitYEAR captures enum value "YEAR"
	AgreementIntervalUnitYEAR string = "YEAR"
)

// prop value enum
func (m *Agreement) validateIntervalUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agreementTypeIntervalUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Agreement) validateIntervalUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.IntervalUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateIntervalUnitEnum("intervalUnit", "body", m.IntervalUnit); err != nil {
		return err
	}

	return nil
}

func (m *Agreement) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var agreementTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","PAUSED","STOPPED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agreementTypeStatusPropEnum = append(agreementTypeStatusPropEnum, v)
	}
}

const (

	// AgreementStatusACTIVE captures enum value "ACTIVE"
	AgreementStatusACTIVE string = "ACTIVE"

	// AgreementStatusPAUSED captures enum value "PAUSED"
	AgreementStatusPAUSED string = "PAUSED"

	// AgreementStatusSTOPPED captures enum value "STOPPED"
	AgreementStatusSTOPPED string = "STOPPED"
)

// prop value enum
func (m *Agreement) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agreementTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Agreement) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Agreement) validateStatusChangeTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusChangeTime) { // not required
		return nil
	}

	if err := validate.FormatOf("statusChangeTime", "body", "datetime", m.StatusChangeTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this agreement based on context it is used
func (m *Agreement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Agreement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Agreement) UnmarshalBinary(b []byte) error {
	var res Agreement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
