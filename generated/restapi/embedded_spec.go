// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "This is the API for summer students backend",
    "title": "summerstudents-backend-app",
    "version": "1.1"
  },
  "paths": {
    "/v0/merchants": {
      "get": {
        "description": "Get all merchants in our database",
        "tags": [
          "summerstudents-backend-app",
          "v0-api"
        ],
        "summary": "Get all merchants",
        "operationId": "MerchantsGetAllV0",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Merchant"
              }
            }
          }
        }
      },
      "post": {
        "description": "Post a merchant to the database",
        "tags": [
          "summerstudents-backend-app",
          "v0-api"
        ],
        "summary": "Post a merchant",
        "operationId": "MerchantsPostV0",
        "parameters": [
          {
            "description": "The merchant to be posted",
            "name": "merchant",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          }
        }
      }
    },
    "/v0/merchants/{vippsnummer}": {
      "get": {
        "description": "Given a vippsnumber a merchant will be returned",
        "tags": [
          "summerstudents-backend-app",
          "v0-api"
        ],
        "summary": "Get a merchant given vippsnummer",
        "operationId": "MerchantsGetV0",
        "parameters": [
          {
            "type": "integer",
            "description": "Get a merchant given its vippsnumber",
            "name": "vippsnummer",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          }
        }
      },
      "patch": {
        "description": "Fake update a merchant in the database",
        "tags": [
          "summerstudents-backend-app",
          "v0-api"
        ],
        "summary": "Update a merchant",
        "operationId": "MerchantsPatchV0",
        "parameters": [
          {
            "description": "The merchant to be updated",
            "name": "merchant",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MerchantUpdateBody"
            }
          },
          {
            "type": "integer",
            "description": "Update a merchant given its vippsnummer",
            "name": "vippsnummer",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          }
        }
      }
    },
    "/v0/recurring-agreements": {
      "post": {
        "description": "Try to created a recurring agreement in the recurring api",
        "tags": [
          "summerstudents-backend-app",
          "v0-api"
        ],
        "summary": "Posting recurring agreement",
        "operationId": "RecurringAgreementsPostV0",
        "parameters": [
          {
            "description": "The recurring agreement to be established",
            "name": "agreement",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AgreementBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AgreementReturn"
            }
          }
        }
      }
    },
    "/v0/recurring-agreements/customer/{customerId}": {
      "get": {
        "description": "Try to created a recurring agreement in the recurring api",
        "tags": [
          "summerstudents-backend-app",
          "v0-api"
        ],
        "summary": "Posting recurring agreement",
        "operationId": "CustomerAgreementsGetAllV0",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the customer",
            "name": "customerId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AgreementGroups"
            }
          }
        }
      }
    },
    "/v0/recurring-agreements/merchant/{vippsnummer}": {
      "get": {
        "description": "Get all agreements for a merchant",
        "tags": [
          "summerstudents-backend-app",
          "v0-api"
        ],
        "summary": "Get merchants agreements",
        "operationId": "MerchantAgreementsGetAllV0",
        "parameters": [
          {
            "type": "integer",
            "description": "Vippsummer of merchant",
            "name": "vippsnummer",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Agreement"
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v0/recurring-agreements/{agreementId}": {
      "get": {
        "description": "Given a recurrent agreement id, get the agreement",
        "tags": [
          "summerstudents-backend-app",
          "Recurrizz v0 endpoints"
        ],
        "summary": "Get recurring agreement",
        "operationId": "RecurringAgreementsGetV0",
        "parameters": [
          {
            "type": "integer",
            "description": "Get a recurring agreement given its agreementId",
            "name": "agreementId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AgreementReturn"
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "description": "Given a recurrent agreement id, update the agreement",
        "tags": [
          "summerstudents-backend-app",
          "v0-api"
        ],
        "summary": "Update recurring agreement",
        "operationId": "RecurringAgreementsPatchV0",
        "parameters": [
          {
            "description": "The recurring agreement to be established",
            "name": "agreement",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AgreementUpdateBody"
            }
          },
          {
            "type": "integer",
            "description": "Update a recurring agreement given its agreementId",
            "name": "agreementId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Agreement"
            }
          }
        }
      }
    },
    "/v1/merchants": {
      "get": {
        "description": "Get all merchants in our database",
        "tags": [
          "summerstudents-backend-app",
          "Recurrizz v1 endpoints"
        ],
        "summary": "Get all merchants",
        "operationId": "MerchantsGetAllV1",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Merchant"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "description": "Post a merchant to the database",
        "tags": [
          "summerstudents-backend-app",
          "Recurrizz v1 endpoints"
        ],
        "summary": "Post a merchant",
        "operationId": "MerchantsPostV1",
        "parameters": [
          {
            "description": "The merchant to be posted",
            "name": "merchant",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v1/merchants/{vippsnummer}": {
      "get": {
        "description": "Given a vippsnummer a merchant will be returned",
        "tags": [
          "summerstudents-backend-app",
          "Recurrizz v1 endpoints"
        ],
        "summary": "Get a merchant given vippsnummer",
        "operationId": "MerchantsGetV1",
        "parameters": [
          {
            "type": "integer",
            "description": "Get a merchant given its vippsnummer",
            "name": "vippsnummer",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "description": "Update a merchant in the database",
        "tags": [
          "summerstudents-backend-app",
          "Recurrizz v1 endpoints"
        ],
        "summary": "Update a merchant",
        "operationId": "MerchantsPatchV1",
        "parameters": [
          {
            "description": "The merchant to be updated",
            "name": "merchant",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MerchantUpdateBody"
            }
          },
          {
            "type": "integer",
            "description": "Update a merchant given its vippsnummer",
            "name": "vippsnummer",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v1/recurring-agreements": {
      "post": {
        "description": "Try to created a recurring agreement in the recurring api",
        "tags": [
          "summerstudents-backend-app",
          "Recurrizz v1 endpoints"
        ],
        "summary": "Posting recurring agreement",
        "operationId": "RecurringAgreementsPostV1",
        "parameters": [
          {
            "description": "The recurring agreement to be established",
            "name": "agreement",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AgreementBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AgreementReturn"
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v1/recurring-agreements/customer/{customerId}": {
      "get": {
        "description": "Listing recurring agreements for a customer",
        "tags": [
          "summerstudents-backend-app",
          "Recurrizz v1 endpoints"
        ],
        "summary": "Listing recurring agreements for a customer",
        "operationId": "CustomerAgreementsGetAllV1",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the customer",
            "name": "customerId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AgreementGroups"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v1/recurring-agreements/merchant/{vippsnummer}": {
      "get": {
        "description": "Get all agreements for a merchant",
        "tags": [
          "summerstudents-backend-app",
          "v1-api"
        ],
        "summary": "Get merchants agreements",
        "operationId": "MerchantAgreementsGetAllV1",
        "parameters": [
          {
            "type": "integer",
            "description": "Vippsummer of merchant",
            "name": "vippsnummer",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Agreement"
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v1/recurring-agreements/{agreementId}": {
      "get": {
        "description": "Given a recurrent agreement id, get the agreement",
        "tags": [
          "summerstudents-backend-app",
          "Recurrizz v1 endpoints"
        ],
        "summary": "Get recurring agreement",
        "operationId": "RecurringAgreementsGetV1",
        "parameters": [
          {
            "type": "integer",
            "description": "Get a recurring agreement given its agreementId",
            "name": "agreementId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Agreement"
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "description": "Given a recurrent agreement id, update the agreement",
        "tags": [
          "summerstudents-backend-app",
          "Recurrizz v1 endpoints"
        ],
        "summary": "Update recurring agreement",
        "operationId": "RecurringAgreementsPatchV1",
        "parameters": [
          {
            "description": "The recurring agreement to be established",
            "name": "agreement",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AgreementUpdateBody"
            }
          },
          {
            "type": "integer",
            "description": "Update a recurring agreement given its agreementId",
            "name": "agreementId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Agreement"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "definitions": {
    "Agreement": {
      "type": "object",
      "properties": {
        "agreementUrl": {
          "type": "string"
        },
        "amount": {
          "type": "integer"
        },
        "customerId": {
          "type": "integer"
        },
        "intervalCount": {
          "type": "integer"
        },
        "intervalUnit": {
          "type": "string",
          "enum": [
            "WEEK",
            "MONTH",
            "YEAR"
          ]
        },
        "paymentDay": {
          "type": "integer"
        },
        "recurringAgreementId": {
          "type": "integer"
        },
        "startDate": {
          "type": "string",
          "format": "date"
        },
        "status": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "PAUSED",
            "STOPPED"
          ]
        },
        "statusChangeTime": {
          "type": "string",
          "format": "datetime"
        },
        "vippsnummer": {
          "type": "integer"
        }
      }
    },
    "AgreementBody": {
      "type": "object",
      "properties": {
        "agreementUrl": {
          "type": "string"
        },
        "amount": {
          "type": "integer"
        },
        "customerId": {
          "type": "integer"
        },
        "intervalCount": {
          "type": "integer"
        },
        "intervalUnit": {
          "type": "string",
          "enum": [
            "WEEK",
            "MONTH",
            "YEAR"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "PAUSED",
            "STOPPED"
          ]
        },
        "vippsnummer": {
          "type": "integer"
        }
      }
    },
    "AgreementDetails": {
      "type": "object",
      "properties": {
        "agreementUrl": {
          "type": "string",
          "x-omitempty": false
        },
        "amount": {
          "type": "integer",
          "x-omitempty": false
        },
        "customerId": {
          "type": "integer",
          "x-omitempty": false
        },
        "intervalCount": {
          "type": "integer",
          "x-omitempty": false
        },
        "intervalUnit": {
          "type": "string",
          "x-omitempty": false
        },
        "logoUrl": {
          "type": "string",
          "x-omitempty": false
        },
        "paymentDay": {
          "type": "integer",
          "x-omitempty": false
        },
        "recurringAgreementId": {
          "type": "integer",
          "x-omitempty": false
        },
        "salesUnit": {
          "type": "string",
          "x-omitempty": false
        },
        "startDate": {
          "type": "string",
          "format": "date",
          "x-omitempty": false
        },
        "status": {
          "type": "string",
          "x-omitempty": false
        },
        "statusChangeTime": {
          "type": "string",
          "format": "datetime",
          "x-omitempty": false
        },
        "vippsnummer": {
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "AgreementGroups": {
      "type": "object",
      "properties": {
        "active": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementDetails"
          }
        },
        "paused": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementDetails"
          }
        },
        "stopped": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementDetails"
          }
        }
      }
    },
    "AgreementReturn": {
      "type": "object",
      "properties": {
        "UUID": {
          "type": "string"
        },
        "agreementId": {
          "type": "integer"
        },
        "chargeId": {
          "type": "string"
        },
        "vippsConfirmationUrl": {
          "type": "string"
        }
      }
    },
    "AgreementUpdateBody": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "integer",
          "x-nullable": true
        },
        "intervalCount": {
          "type": "integer",
          "x-nullable": true
        },
        "intervalUnit": {
          "type": "string",
          "enum": [
            "WEEK",
            "MONTH",
            "YEAR"
          ],
          "x-nullable": true
        },
        "paymentDay": {
          "type": "integer",
          "x-nullable": true
        },
        "status": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "PAUSED",
            "STOPPED"
          ],
          "x-nullable": true
        }
      }
    },
    "Merchant": {
      "type": "object",
      "properties": {
        "coverUrl": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "greeting": {
          "type": "string",
          "x-omitempty": false
        },
        "hasRecurring": {
          "type": "boolean"
        },
        "logoUrl": {
          "type": "string"
        },
        "merchantName": {
          "type": "string"
        },
        "minimumAmount": {
          "type": "integer",
          "x-omitempty": false
        },
        "offers": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "salesUnit": {
          "type": "string"
        },
        "termsConditions": {
          "type": "string"
        },
        "vippsnummer": {
          "type": "integer"
        }
      }
    },
    "MerchantUpdateBody": {
      "type": "object",
      "properties": {
        "coverUrl": {
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "greeting": {
          "type": "string",
          "x-nullable": true
        },
        "hasRecurring": {
          "type": "boolean",
          "x-nullable": true
        },
        "logoUrl": {
          "type": "string",
          "x-nullable": true
        },
        "merchantName": {
          "type": "string",
          "x-nullable": true
        },
        "minimumAmount": {
          "type": "integer",
          "x-nullable": true
        },
        "offers": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "x-nullable": true
        },
        "salesUnit": {
          "type": "string",
          "x-nullable": true
        },
        "termsConditions": {
          "type": "string",
          "x-nullable": true
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "This is the API for summer students backend",
    "title": "summerstudents-backend-app",
    "version": "1.1"
  },
  "paths": {
    "/v0/merchants": {
      "get": {
        "description": "Get all merchants in our database",
        "tags": [
          "summerstudents-backend-app",
          "v0-api"
        ],
        "summary": "Get all merchants",
        "operationId": "MerchantsGetAllV0",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Merchant"
              }
            }
          }
        }
      },
      "post": {
        "description": "Post a merchant to the database",
        "tags": [
          "summerstudents-backend-app",
          "v0-api"
        ],
        "summary": "Post a merchant",
        "operationId": "MerchantsPostV0",
        "parameters": [
          {
            "description": "The merchant to be posted",
            "name": "merchant",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          }
        }
      }
    },
    "/v0/merchants/{vippsnummer}": {
      "get": {
        "description": "Given a vippsnumber a merchant will be returned",
        "tags": [
          "summerstudents-backend-app",
          "v0-api"
        ],
        "summary": "Get a merchant given vippsnummer",
        "operationId": "MerchantsGetV0",
        "parameters": [
          {
            "type": "integer",
            "description": "Get a merchant given its vippsnumber",
            "name": "vippsnummer",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          }
        }
      },
      "patch": {
        "description": "Fake update a merchant in the database",
        "tags": [
          "summerstudents-backend-app",
          "v0-api"
        ],
        "summary": "Update a merchant",
        "operationId": "MerchantsPatchV0",
        "parameters": [
          {
            "description": "The merchant to be updated",
            "name": "merchant",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MerchantUpdateBody"
            }
          },
          {
            "type": "integer",
            "description": "Update a merchant given its vippsnummer",
            "name": "vippsnummer",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          }
        }
      }
    },
    "/v0/recurring-agreements": {
      "post": {
        "description": "Try to created a recurring agreement in the recurring api",
        "tags": [
          "summerstudents-backend-app",
          "v0-api"
        ],
        "summary": "Posting recurring agreement",
        "operationId": "RecurringAgreementsPostV0",
        "parameters": [
          {
            "description": "The recurring agreement to be established",
            "name": "agreement",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AgreementBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AgreementReturn"
            }
          }
        }
      }
    },
    "/v0/recurring-agreements/customer/{customerId}": {
      "get": {
        "description": "Try to created a recurring agreement in the recurring api",
        "tags": [
          "summerstudents-backend-app",
          "v0-api"
        ],
        "summary": "Posting recurring agreement",
        "operationId": "CustomerAgreementsGetAllV0",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the customer",
            "name": "customerId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AgreementGroups"
            }
          }
        }
      }
    },
    "/v0/recurring-agreements/merchant/{vippsnummer}": {
      "get": {
        "description": "Get all agreements for a merchant",
        "tags": [
          "summerstudents-backend-app",
          "v0-api"
        ],
        "summary": "Get merchants agreements",
        "operationId": "MerchantAgreementsGetAllV0",
        "parameters": [
          {
            "type": "integer",
            "description": "Vippsummer of merchant",
            "name": "vippsnummer",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Agreement"
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v0/recurring-agreements/{agreementId}": {
      "get": {
        "description": "Given a recurrent agreement id, get the agreement",
        "tags": [
          "summerstudents-backend-app",
          "Recurrizz v0 endpoints"
        ],
        "summary": "Get recurring agreement",
        "operationId": "RecurringAgreementsGetV0",
        "parameters": [
          {
            "type": "integer",
            "description": "Get a recurring agreement given its agreementId",
            "name": "agreementId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AgreementReturn"
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "description": "Given a recurrent agreement id, update the agreement",
        "tags": [
          "summerstudents-backend-app",
          "v0-api"
        ],
        "summary": "Update recurring agreement",
        "operationId": "RecurringAgreementsPatchV0",
        "parameters": [
          {
            "description": "The recurring agreement to be established",
            "name": "agreement",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AgreementUpdateBody"
            }
          },
          {
            "type": "integer",
            "description": "Update a recurring agreement given its agreementId",
            "name": "agreementId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Agreement"
            }
          }
        }
      }
    },
    "/v1/merchants": {
      "get": {
        "description": "Get all merchants in our database",
        "tags": [
          "summerstudents-backend-app",
          "Recurrizz v1 endpoints"
        ],
        "summary": "Get all merchants",
        "operationId": "MerchantsGetAllV1",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Merchant"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "description": "Post a merchant to the database",
        "tags": [
          "summerstudents-backend-app",
          "Recurrizz v1 endpoints"
        ],
        "summary": "Post a merchant",
        "operationId": "MerchantsPostV1",
        "parameters": [
          {
            "description": "The merchant to be posted",
            "name": "merchant",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v1/merchants/{vippsnummer}": {
      "get": {
        "description": "Given a vippsnummer a merchant will be returned",
        "tags": [
          "summerstudents-backend-app",
          "Recurrizz v1 endpoints"
        ],
        "summary": "Get a merchant given vippsnummer",
        "operationId": "MerchantsGetV1",
        "parameters": [
          {
            "type": "integer",
            "description": "Get a merchant given its vippsnummer",
            "name": "vippsnummer",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "description": "Update a merchant in the database",
        "tags": [
          "summerstudents-backend-app",
          "Recurrizz v1 endpoints"
        ],
        "summary": "Update a merchant",
        "operationId": "MerchantsPatchV1",
        "parameters": [
          {
            "description": "The merchant to be updated",
            "name": "merchant",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MerchantUpdateBody"
            }
          },
          {
            "type": "integer",
            "description": "Update a merchant given its vippsnummer",
            "name": "vippsnummer",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Merchant"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v1/recurring-agreements": {
      "post": {
        "description": "Try to created a recurring agreement in the recurring api",
        "tags": [
          "summerstudents-backend-app",
          "Recurrizz v1 endpoints"
        ],
        "summary": "Posting recurring agreement",
        "operationId": "RecurringAgreementsPostV1",
        "parameters": [
          {
            "description": "The recurring agreement to be established",
            "name": "agreement",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AgreementBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AgreementReturn"
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v1/recurring-agreements/customer/{customerId}": {
      "get": {
        "description": "Listing recurring agreements for a customer",
        "tags": [
          "summerstudents-backend-app",
          "Recurrizz v1 endpoints"
        ],
        "summary": "Listing recurring agreements for a customer",
        "operationId": "CustomerAgreementsGetAllV1",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the customer",
            "name": "customerId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AgreementGroups"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v1/recurring-agreements/merchant/{vippsnummer}": {
      "get": {
        "description": "Get all agreements for a merchant",
        "tags": [
          "summerstudents-backend-app",
          "v1-api"
        ],
        "summary": "Get merchants agreements",
        "operationId": "MerchantAgreementsGetAllV1",
        "parameters": [
          {
            "type": "integer",
            "description": "Vippsummer of merchant",
            "name": "vippsnummer",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Agreement"
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v1/recurring-agreements/{agreementId}": {
      "get": {
        "description": "Given a recurrent agreement id, get the agreement",
        "tags": [
          "summerstudents-backend-app",
          "Recurrizz v1 endpoints"
        ],
        "summary": "Get recurring agreement",
        "operationId": "RecurringAgreementsGetV1",
        "parameters": [
          {
            "type": "integer",
            "description": "Get a recurring agreement given its agreementId",
            "name": "agreementId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Agreement"
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "description": "Given a recurrent agreement id, update the agreement",
        "tags": [
          "summerstudents-backend-app",
          "Recurrizz v1 endpoints"
        ],
        "summary": "Update recurring agreement",
        "operationId": "RecurringAgreementsPatchV1",
        "parameters": [
          {
            "description": "The recurring agreement to be established",
            "name": "agreement",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AgreementUpdateBody"
            }
          },
          {
            "type": "integer",
            "description": "Update a recurring agreement given its agreementId",
            "name": "agreementId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Agreement"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "definitions": {
    "Agreement": {
      "type": "object",
      "properties": {
        "agreementUrl": {
          "type": "string"
        },
        "amount": {
          "type": "integer"
        },
        "customerId": {
          "type": "integer"
        },
        "intervalCount": {
          "type": "integer"
        },
        "intervalUnit": {
          "type": "string",
          "enum": [
            "WEEK",
            "MONTH",
            "YEAR"
          ]
        },
        "paymentDay": {
          "type": "integer"
        },
        "recurringAgreementId": {
          "type": "integer"
        },
        "startDate": {
          "type": "string",
          "format": "date"
        },
        "status": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "PAUSED",
            "STOPPED"
          ]
        },
        "statusChangeTime": {
          "type": "string",
          "format": "datetime"
        },
        "vippsnummer": {
          "type": "integer"
        }
      }
    },
    "AgreementBody": {
      "type": "object",
      "properties": {
        "agreementUrl": {
          "type": "string"
        },
        "amount": {
          "type": "integer"
        },
        "customerId": {
          "type": "integer"
        },
        "intervalCount": {
          "type": "integer"
        },
        "intervalUnit": {
          "type": "string",
          "enum": [
            "WEEK",
            "MONTH",
            "YEAR"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "PAUSED",
            "STOPPED"
          ]
        },
        "vippsnummer": {
          "type": "integer"
        }
      }
    },
    "AgreementDetails": {
      "type": "object",
      "properties": {
        "agreementUrl": {
          "type": "string",
          "x-omitempty": false
        },
        "amount": {
          "type": "integer",
          "x-omitempty": false
        },
        "customerId": {
          "type": "integer",
          "x-omitempty": false
        },
        "intervalCount": {
          "type": "integer",
          "x-omitempty": false
        },
        "intervalUnit": {
          "type": "string",
          "x-omitempty": false
        },
        "logoUrl": {
          "type": "string",
          "x-omitempty": false
        },
        "paymentDay": {
          "type": "integer",
          "x-omitempty": false
        },
        "recurringAgreementId": {
          "type": "integer",
          "x-omitempty": false
        },
        "salesUnit": {
          "type": "string",
          "x-omitempty": false
        },
        "startDate": {
          "type": "string",
          "format": "date",
          "x-omitempty": false
        },
        "status": {
          "type": "string",
          "x-omitempty": false
        },
        "statusChangeTime": {
          "type": "string",
          "format": "datetime",
          "x-omitempty": false
        },
        "vippsnummer": {
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "AgreementGroups": {
      "type": "object",
      "properties": {
        "active": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementDetails"
          }
        },
        "paused": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementDetails"
          }
        },
        "stopped": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementDetails"
          }
        }
      }
    },
    "AgreementReturn": {
      "type": "object",
      "properties": {
        "UUID": {
          "type": "string"
        },
        "agreementId": {
          "type": "integer"
        },
        "chargeId": {
          "type": "string"
        },
        "vippsConfirmationUrl": {
          "type": "string"
        }
      }
    },
    "AgreementUpdateBody": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "integer",
          "x-nullable": true
        },
        "intervalCount": {
          "type": "integer",
          "x-nullable": true
        },
        "intervalUnit": {
          "type": "string",
          "enum": [
            "WEEK",
            "MONTH",
            "YEAR"
          ],
          "x-nullable": true
        },
        "paymentDay": {
          "type": "integer",
          "x-nullable": true
        },
        "status": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "PAUSED",
            "STOPPED"
          ],
          "x-nullable": true
        }
      }
    },
    "Merchant": {
      "type": "object",
      "properties": {
        "coverUrl": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "greeting": {
          "type": "string",
          "x-omitempty": false
        },
        "hasRecurring": {
          "type": "boolean"
        },
        "logoUrl": {
          "type": "string"
        },
        "merchantName": {
          "type": "string"
        },
        "minimumAmount": {
          "type": "integer",
          "x-omitempty": false
        },
        "offers": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "salesUnit": {
          "type": "string"
        },
        "termsConditions": {
          "type": "string"
        },
        "vippsnummer": {
          "type": "integer"
        }
      }
    },
    "MerchantUpdateBody": {
      "type": "object",
      "properties": {
        "coverUrl": {
          "type": "string",
          "x-nullable": true
        },
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "greeting": {
          "type": "string",
          "x-nullable": true
        },
        "hasRecurring": {
          "type": "boolean",
          "x-nullable": true
        },
        "logoUrl": {
          "type": "string",
          "x-nullable": true
        },
        "merchantName": {
          "type": "string",
          "x-nullable": true
        },
        "minimumAmount": {
          "type": "integer",
          "x-nullable": true
        },
        "offers": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "x-nullable": true
        },
        "salesUnit": {
          "type": "string",
          "x-nullable": true
        },
        "termsConditions": {
          "type": "string",
          "x-nullable": true
        }
      }
    }
  }
}`))
}
