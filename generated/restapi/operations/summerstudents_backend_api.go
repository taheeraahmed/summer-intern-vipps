// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/vippsas/summerstudents-backend/generated/restapi/operations/summerstudents_backend_app"
)

// NewSummerstudentsBackendAPI creates a new SummerstudentsBackend instance
func NewSummerstudentsBackendAPI(spec *loads.Document) *SummerstudentsBackendAPI {
	return &SummerstudentsBackendAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		SummerstudentsBackendAppCustomerAgreementsGetAllV0Handler: summerstudents_backend_app.CustomerAgreementsGetAllV0HandlerFunc(func(params summerstudents_backend_app.CustomerAgreementsGetAllV0Params) middleware.Responder {
			return middleware.NotImplemented("operation summerstudents_backend_app.CustomerAgreementsGetAllV0 has not yet been implemented")
		}),
		SummerstudentsBackendAppCustomerAgreementsGetAllV1Handler: summerstudents_backend_app.CustomerAgreementsGetAllV1HandlerFunc(func(params summerstudents_backend_app.CustomerAgreementsGetAllV1Params) middleware.Responder {
			return middleware.NotImplemented("operation summerstudents_backend_app.CustomerAgreementsGetAllV1 has not yet been implemented")
		}),
		SummerstudentsBackendAppMerchantAgreementsGetAllV0Handler: summerstudents_backend_app.MerchantAgreementsGetAllV0HandlerFunc(func(params summerstudents_backend_app.MerchantAgreementsGetAllV0Params) middleware.Responder {
			return middleware.NotImplemented("operation summerstudents_backend_app.MerchantAgreementsGetAllV0 has not yet been implemented")
		}),
		SummerstudentsBackendAppMerchantAgreementsGetAllV1Handler: summerstudents_backend_app.MerchantAgreementsGetAllV1HandlerFunc(func(params summerstudents_backend_app.MerchantAgreementsGetAllV1Params) middleware.Responder {
			return middleware.NotImplemented("operation summerstudents_backend_app.MerchantAgreementsGetAllV1 has not yet been implemented")
		}),
		SummerstudentsBackendAppMerchantsGetAllV0Handler: summerstudents_backend_app.MerchantsGetAllV0HandlerFunc(func(params summerstudents_backend_app.MerchantsGetAllV0Params) middleware.Responder {
			return middleware.NotImplemented("operation summerstudents_backend_app.MerchantsGetAllV0 has not yet been implemented")
		}),
		SummerstudentsBackendAppMerchantsGetAllV1Handler: summerstudents_backend_app.MerchantsGetAllV1HandlerFunc(func(params summerstudents_backend_app.MerchantsGetAllV1Params) middleware.Responder {
			return middleware.NotImplemented("operation summerstudents_backend_app.MerchantsGetAllV1 has not yet been implemented")
		}),
		SummerstudentsBackendAppMerchantsGetV0Handler: summerstudents_backend_app.MerchantsGetV0HandlerFunc(func(params summerstudents_backend_app.MerchantsGetV0Params) middleware.Responder {
			return middleware.NotImplemented("operation summerstudents_backend_app.MerchantsGetV0 has not yet been implemented")
		}),
		SummerstudentsBackendAppMerchantsGetV1Handler: summerstudents_backend_app.MerchantsGetV1HandlerFunc(func(params summerstudents_backend_app.MerchantsGetV1Params) middleware.Responder {
			return middleware.NotImplemented("operation summerstudents_backend_app.MerchantsGetV1 has not yet been implemented")
		}),
		SummerstudentsBackendAppMerchantsPatchV0Handler: summerstudents_backend_app.MerchantsPatchV0HandlerFunc(func(params summerstudents_backend_app.MerchantsPatchV0Params) middleware.Responder {
			return middleware.NotImplemented("operation summerstudents_backend_app.MerchantsPatchV0 has not yet been implemented")
		}),
		SummerstudentsBackendAppMerchantsPatchV1Handler: summerstudents_backend_app.MerchantsPatchV1HandlerFunc(func(params summerstudents_backend_app.MerchantsPatchV1Params) middleware.Responder {
			return middleware.NotImplemented("operation summerstudents_backend_app.MerchantsPatchV1 has not yet been implemented")
		}),
		SummerstudentsBackendAppMerchantsPostV0Handler: summerstudents_backend_app.MerchantsPostV0HandlerFunc(func(params summerstudents_backend_app.MerchantsPostV0Params) middleware.Responder {
			return middleware.NotImplemented("operation summerstudents_backend_app.MerchantsPostV0 has not yet been implemented")
		}),
		SummerstudentsBackendAppMerchantsPostV1Handler: summerstudents_backend_app.MerchantsPostV1HandlerFunc(func(params summerstudents_backend_app.MerchantsPostV1Params) middleware.Responder {
			return middleware.NotImplemented("operation summerstudents_backend_app.MerchantsPostV1 has not yet been implemented")
		}),
		SummerstudentsBackendAppRecurringAgreementsGetV0Handler: summerstudents_backend_app.RecurringAgreementsGetV0HandlerFunc(func(params summerstudents_backend_app.RecurringAgreementsGetV0Params) middleware.Responder {
			return middleware.NotImplemented("operation summerstudents_backend_app.RecurringAgreementsGetV0 has not yet been implemented")
		}),
		SummerstudentsBackendAppRecurringAgreementsGetV1Handler: summerstudents_backend_app.RecurringAgreementsGetV1HandlerFunc(func(params summerstudents_backend_app.RecurringAgreementsGetV1Params) middleware.Responder {
			return middleware.NotImplemented("operation summerstudents_backend_app.RecurringAgreementsGetV1 has not yet been implemented")
		}),
		SummerstudentsBackendAppRecurringAgreementsPatchV0Handler: summerstudents_backend_app.RecurringAgreementsPatchV0HandlerFunc(func(params summerstudents_backend_app.RecurringAgreementsPatchV0Params) middleware.Responder {
			return middleware.NotImplemented("operation summerstudents_backend_app.RecurringAgreementsPatchV0 has not yet been implemented")
		}),
		SummerstudentsBackendAppRecurringAgreementsPatchV1Handler: summerstudents_backend_app.RecurringAgreementsPatchV1HandlerFunc(func(params summerstudents_backend_app.RecurringAgreementsPatchV1Params) middleware.Responder {
			return middleware.NotImplemented("operation summerstudents_backend_app.RecurringAgreementsPatchV1 has not yet been implemented")
		}),
		SummerstudentsBackendAppRecurringAgreementsPostV0Handler: summerstudents_backend_app.RecurringAgreementsPostV0HandlerFunc(func(params summerstudents_backend_app.RecurringAgreementsPostV0Params) middleware.Responder {
			return middleware.NotImplemented("operation summerstudents_backend_app.RecurringAgreementsPostV0 has not yet been implemented")
		}),
		SummerstudentsBackendAppRecurringAgreementsPostV1Handler: summerstudents_backend_app.RecurringAgreementsPostV1HandlerFunc(func(params summerstudents_backend_app.RecurringAgreementsPostV1Params) middleware.Responder {
			return middleware.NotImplemented("operation summerstudents_backend_app.RecurringAgreementsPostV1 has not yet been implemented")
		}),
	}
}

/*SummerstudentsBackendAPI This is the API for summer students backend */
type SummerstudentsBackendAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// SummerstudentsBackendAppCustomerAgreementsGetAllV0Handler sets the operation handler for the customer agreements get all v0 operation
	SummerstudentsBackendAppCustomerAgreementsGetAllV0Handler summerstudents_backend_app.CustomerAgreementsGetAllV0Handler
	// SummerstudentsBackendAppCustomerAgreementsGetAllV1Handler sets the operation handler for the customer agreements get all v1 operation
	SummerstudentsBackendAppCustomerAgreementsGetAllV1Handler summerstudents_backend_app.CustomerAgreementsGetAllV1Handler
	// SummerstudentsBackendAppMerchantAgreementsGetAllV0Handler sets the operation handler for the merchant agreements get all v0 operation
	SummerstudentsBackendAppMerchantAgreementsGetAllV0Handler summerstudents_backend_app.MerchantAgreementsGetAllV0Handler
	// SummerstudentsBackendAppMerchantAgreementsGetAllV1Handler sets the operation handler for the merchant agreements get all v1 operation
	SummerstudentsBackendAppMerchantAgreementsGetAllV1Handler summerstudents_backend_app.MerchantAgreementsGetAllV1Handler
	// SummerstudentsBackendAppMerchantsGetAllV0Handler sets the operation handler for the merchants get all v0 operation
	SummerstudentsBackendAppMerchantsGetAllV0Handler summerstudents_backend_app.MerchantsGetAllV0Handler
	// SummerstudentsBackendAppMerchantsGetAllV1Handler sets the operation handler for the merchants get all v1 operation
	SummerstudentsBackendAppMerchantsGetAllV1Handler summerstudents_backend_app.MerchantsGetAllV1Handler
	// SummerstudentsBackendAppMerchantsGetV0Handler sets the operation handler for the merchants get v0 operation
	SummerstudentsBackendAppMerchantsGetV0Handler summerstudents_backend_app.MerchantsGetV0Handler
	// SummerstudentsBackendAppMerchantsGetV1Handler sets the operation handler for the merchants get v1 operation
	SummerstudentsBackendAppMerchantsGetV1Handler summerstudents_backend_app.MerchantsGetV1Handler
	// SummerstudentsBackendAppMerchantsPatchV0Handler sets the operation handler for the merchants patch v0 operation
	SummerstudentsBackendAppMerchantsPatchV0Handler summerstudents_backend_app.MerchantsPatchV0Handler
	// SummerstudentsBackendAppMerchantsPatchV1Handler sets the operation handler for the merchants patch v1 operation
	SummerstudentsBackendAppMerchantsPatchV1Handler summerstudents_backend_app.MerchantsPatchV1Handler
	// SummerstudentsBackendAppMerchantsPostV0Handler sets the operation handler for the merchants post v0 operation
	SummerstudentsBackendAppMerchantsPostV0Handler summerstudents_backend_app.MerchantsPostV0Handler
	// SummerstudentsBackendAppMerchantsPostV1Handler sets the operation handler for the merchants post v1 operation
	SummerstudentsBackendAppMerchantsPostV1Handler summerstudents_backend_app.MerchantsPostV1Handler
	// SummerstudentsBackendAppRecurringAgreementsGetV0Handler sets the operation handler for the recurring agreements get v0 operation
	SummerstudentsBackendAppRecurringAgreementsGetV0Handler summerstudents_backend_app.RecurringAgreementsGetV0Handler
	// SummerstudentsBackendAppRecurringAgreementsGetV1Handler sets the operation handler for the recurring agreements get v1 operation
	SummerstudentsBackendAppRecurringAgreementsGetV1Handler summerstudents_backend_app.RecurringAgreementsGetV1Handler
	// SummerstudentsBackendAppRecurringAgreementsPatchV0Handler sets the operation handler for the recurring agreements patch v0 operation
	SummerstudentsBackendAppRecurringAgreementsPatchV0Handler summerstudents_backend_app.RecurringAgreementsPatchV0Handler
	// SummerstudentsBackendAppRecurringAgreementsPatchV1Handler sets the operation handler for the recurring agreements patch v1 operation
	SummerstudentsBackendAppRecurringAgreementsPatchV1Handler summerstudents_backend_app.RecurringAgreementsPatchV1Handler
	// SummerstudentsBackendAppRecurringAgreementsPostV0Handler sets the operation handler for the recurring agreements post v0 operation
	SummerstudentsBackendAppRecurringAgreementsPostV0Handler summerstudents_backend_app.RecurringAgreementsPostV0Handler
	// SummerstudentsBackendAppRecurringAgreementsPostV1Handler sets the operation handler for the recurring agreements post v1 operation
	SummerstudentsBackendAppRecurringAgreementsPostV1Handler summerstudents_backend_app.RecurringAgreementsPostV1Handler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *SummerstudentsBackendAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *SummerstudentsBackendAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *SummerstudentsBackendAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *SummerstudentsBackendAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *SummerstudentsBackendAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *SummerstudentsBackendAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *SummerstudentsBackendAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *SummerstudentsBackendAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *SummerstudentsBackendAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the SummerstudentsBackendAPI
func (o *SummerstudentsBackendAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.SummerstudentsBackendAppCustomerAgreementsGetAllV0Handler == nil {
		unregistered = append(unregistered, "summerstudents_backend_app.CustomerAgreementsGetAllV0Handler")
	}
	if o.SummerstudentsBackendAppCustomerAgreementsGetAllV1Handler == nil {
		unregistered = append(unregistered, "summerstudents_backend_app.CustomerAgreementsGetAllV1Handler")
	}
	if o.SummerstudentsBackendAppMerchantAgreementsGetAllV0Handler == nil {
		unregistered = append(unregistered, "summerstudents_backend_app.MerchantAgreementsGetAllV0Handler")
	}
	if o.SummerstudentsBackendAppMerchantAgreementsGetAllV1Handler == nil {
		unregistered = append(unregistered, "summerstudents_backend_app.MerchantAgreementsGetAllV1Handler")
	}
	if o.SummerstudentsBackendAppMerchantsGetAllV0Handler == nil {
		unregistered = append(unregistered, "summerstudents_backend_app.MerchantsGetAllV0Handler")
	}
	if o.SummerstudentsBackendAppMerchantsGetAllV1Handler == nil {
		unregistered = append(unregistered, "summerstudents_backend_app.MerchantsGetAllV1Handler")
	}
	if o.SummerstudentsBackendAppMerchantsGetV0Handler == nil {
		unregistered = append(unregistered, "summerstudents_backend_app.MerchantsGetV0Handler")
	}
	if o.SummerstudentsBackendAppMerchantsGetV1Handler == nil {
		unregistered = append(unregistered, "summerstudents_backend_app.MerchantsGetV1Handler")
	}
	if o.SummerstudentsBackendAppMerchantsPatchV0Handler == nil {
		unregistered = append(unregistered, "summerstudents_backend_app.MerchantsPatchV0Handler")
	}
	if o.SummerstudentsBackendAppMerchantsPatchV1Handler == nil {
		unregistered = append(unregistered, "summerstudents_backend_app.MerchantsPatchV1Handler")
	}
	if o.SummerstudentsBackendAppMerchantsPostV0Handler == nil {
		unregistered = append(unregistered, "summerstudents_backend_app.MerchantsPostV0Handler")
	}
	if o.SummerstudentsBackendAppMerchantsPostV1Handler == nil {
		unregistered = append(unregistered, "summerstudents_backend_app.MerchantsPostV1Handler")
	}
	if o.SummerstudentsBackendAppRecurringAgreementsGetV0Handler == nil {
		unregistered = append(unregistered, "summerstudents_backend_app.RecurringAgreementsGetV0Handler")
	}
	if o.SummerstudentsBackendAppRecurringAgreementsGetV1Handler == nil {
		unregistered = append(unregistered, "summerstudents_backend_app.RecurringAgreementsGetV1Handler")
	}
	if o.SummerstudentsBackendAppRecurringAgreementsPatchV0Handler == nil {
		unregistered = append(unregistered, "summerstudents_backend_app.RecurringAgreementsPatchV0Handler")
	}
	if o.SummerstudentsBackendAppRecurringAgreementsPatchV1Handler == nil {
		unregistered = append(unregistered, "summerstudents_backend_app.RecurringAgreementsPatchV1Handler")
	}
	if o.SummerstudentsBackendAppRecurringAgreementsPostV0Handler == nil {
		unregistered = append(unregistered, "summerstudents_backend_app.RecurringAgreementsPostV0Handler")
	}
	if o.SummerstudentsBackendAppRecurringAgreementsPostV1Handler == nil {
		unregistered = append(unregistered, "summerstudents_backend_app.RecurringAgreementsPostV1Handler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *SummerstudentsBackendAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *SummerstudentsBackendAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *SummerstudentsBackendAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *SummerstudentsBackendAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *SummerstudentsBackendAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *SummerstudentsBackendAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the summerstudents backend API
func (o *SummerstudentsBackendAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *SummerstudentsBackendAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v0/recurring-agreements/customer/{customerId}"] = summerstudents_backend_app.NewCustomerAgreementsGetAllV0(o.context, o.SummerstudentsBackendAppCustomerAgreementsGetAllV0Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/recurring-agreements/customer/{customerId}"] = summerstudents_backend_app.NewCustomerAgreementsGetAllV1(o.context, o.SummerstudentsBackendAppCustomerAgreementsGetAllV1Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v0/recurring-agreements/merchant/{vippsnummer}"] = summerstudents_backend_app.NewMerchantAgreementsGetAllV0(o.context, o.SummerstudentsBackendAppMerchantAgreementsGetAllV0Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/recurring-agreements/merchant/{vippsnummer}"] = summerstudents_backend_app.NewMerchantAgreementsGetAllV1(o.context, o.SummerstudentsBackendAppMerchantAgreementsGetAllV1Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v0/merchants"] = summerstudents_backend_app.NewMerchantsGetAllV0(o.context, o.SummerstudentsBackendAppMerchantsGetAllV0Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/merchants"] = summerstudents_backend_app.NewMerchantsGetAllV1(o.context, o.SummerstudentsBackendAppMerchantsGetAllV1Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v0/merchants/{vippsnummer}"] = summerstudents_backend_app.NewMerchantsGetV0(o.context, o.SummerstudentsBackendAppMerchantsGetV0Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/merchants/{vippsnummer}"] = summerstudents_backend_app.NewMerchantsGetV1(o.context, o.SummerstudentsBackendAppMerchantsGetV1Handler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v0/merchants/{vippsnummer}"] = summerstudents_backend_app.NewMerchantsPatchV0(o.context, o.SummerstudentsBackendAppMerchantsPatchV0Handler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v1/merchants/{vippsnummer}"] = summerstudents_backend_app.NewMerchantsPatchV1(o.context, o.SummerstudentsBackendAppMerchantsPatchV1Handler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v0/merchants"] = summerstudents_backend_app.NewMerchantsPostV0(o.context, o.SummerstudentsBackendAppMerchantsPostV0Handler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/merchants"] = summerstudents_backend_app.NewMerchantsPostV1(o.context, o.SummerstudentsBackendAppMerchantsPostV1Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v0/recurring-agreements/{agreementId}"] = summerstudents_backend_app.NewRecurringAgreementsGetV0(o.context, o.SummerstudentsBackendAppRecurringAgreementsGetV0Handler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/recurring-agreements/{agreementId}"] = summerstudents_backend_app.NewRecurringAgreementsGetV1(o.context, o.SummerstudentsBackendAppRecurringAgreementsGetV1Handler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v0/recurring-agreements/{agreementId}"] = summerstudents_backend_app.NewRecurringAgreementsPatchV0(o.context, o.SummerstudentsBackendAppRecurringAgreementsPatchV0Handler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v1/recurring-agreements/{agreementId}"] = summerstudents_backend_app.NewRecurringAgreementsPatchV1(o.context, o.SummerstudentsBackendAppRecurringAgreementsPatchV1Handler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v0/recurring-agreements"] = summerstudents_backend_app.NewRecurringAgreementsPostV0(o.context, o.SummerstudentsBackendAppRecurringAgreementsPostV0Handler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/recurring-agreements"] = summerstudents_backend_app.NewRecurringAgreementsPostV1(o.context, o.SummerstudentsBackendAppRecurringAgreementsPostV1Handler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *SummerstudentsBackendAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *SummerstudentsBackendAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *SummerstudentsBackendAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *SummerstudentsBackendAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *SummerstudentsBackendAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[um][path] = builder(h)
	}
}
