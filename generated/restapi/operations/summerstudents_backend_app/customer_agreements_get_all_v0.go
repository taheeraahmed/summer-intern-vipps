// Code generated by go-swagger; DO NOT EDIT.

package summerstudents_backend_app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CustomerAgreementsGetAllV0HandlerFunc turns a function with the right signature into a customer agreements get all v0 handler
type CustomerAgreementsGetAllV0HandlerFunc func(CustomerAgreementsGetAllV0Params) middleware.Responder

// Handle executing the request and returning a response
func (fn CustomerAgreementsGetAllV0HandlerFunc) Handle(params CustomerAgreementsGetAllV0Params) middleware.Responder {
	return fn(params)
}

// CustomerAgreementsGetAllV0Handler interface for that can handle valid customer agreements get all v0 params
type CustomerAgreementsGetAllV0Handler interface {
	Handle(CustomerAgreementsGetAllV0Params) middleware.Responder
}

// NewCustomerAgreementsGetAllV0 creates a new http.Handler for the customer agreements get all v0 operation
func NewCustomerAgreementsGetAllV0(ctx *middleware.Context, handler CustomerAgreementsGetAllV0Handler) *CustomerAgreementsGetAllV0 {
	return &CustomerAgreementsGetAllV0{Context: ctx, Handler: handler}
}

/*
	CustomerAgreementsGetAllV0 swagger:route GET /v0/recurring-agreements/customer/{customerId} summerstudents-backend-app v0-api customerAgreementsGetAllV0

# Posting recurring agreement

Try to created a recurring agreement in the recurring api
*/
type CustomerAgreementsGetAllV0 struct {
	Context *middleware.Context
	Handler CustomerAgreementsGetAllV0Handler
}

func (o *CustomerAgreementsGetAllV0) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCustomerAgreementsGetAllV0Params()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
