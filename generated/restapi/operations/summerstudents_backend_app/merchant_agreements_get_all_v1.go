// Code generated by go-swagger; DO NOT EDIT.

package summerstudents_backend_app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// MerchantAgreementsGetAllV1HandlerFunc turns a function with the right signature into a merchant agreements get all v1 handler
type MerchantAgreementsGetAllV1HandlerFunc func(MerchantAgreementsGetAllV1Params) middleware.Responder

// Handle executing the request and returning a response
func (fn MerchantAgreementsGetAllV1HandlerFunc) Handle(params MerchantAgreementsGetAllV1Params) middleware.Responder {
	return fn(params)
}

// MerchantAgreementsGetAllV1Handler interface for that can handle valid merchant agreements get all v1 params
type MerchantAgreementsGetAllV1Handler interface {
	Handle(MerchantAgreementsGetAllV1Params) middleware.Responder
}

// NewMerchantAgreementsGetAllV1 creates a new http.Handler for the merchant agreements get all v1 operation
func NewMerchantAgreementsGetAllV1(ctx *middleware.Context, handler MerchantAgreementsGetAllV1Handler) *MerchantAgreementsGetAllV1 {
	return &MerchantAgreementsGetAllV1{Context: ctx, Handler: handler}
}

/*
	MerchantAgreementsGetAllV1 swagger:route GET /v1/recurring-agreements/merchant/{vippsnummer} summerstudents-backend-app v1-api merchantAgreementsGetAllV1

# Get merchants agreements

Get all agreements for a merchant
*/
type MerchantAgreementsGetAllV1 struct {
	Context *middleware.Context
	Handler MerchantAgreementsGetAllV1Handler
}

func (o *MerchantAgreementsGetAllV1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewMerchantAgreementsGetAllV1Params()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
