// Code generated by go-swagger; DO NOT EDIT.

package summerstudents_backend_app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RecurringAgreementsPatchV0HandlerFunc turns a function with the right signature into a recurring agreements patch v0 handler
type RecurringAgreementsPatchV0HandlerFunc func(RecurringAgreementsPatchV0Params) middleware.Responder

// Handle executing the request and returning a response
func (fn RecurringAgreementsPatchV0HandlerFunc) Handle(params RecurringAgreementsPatchV0Params) middleware.Responder {
	return fn(params)
}

// RecurringAgreementsPatchV0Handler interface for that can handle valid recurring agreements patch v0 params
type RecurringAgreementsPatchV0Handler interface {
	Handle(RecurringAgreementsPatchV0Params) middleware.Responder
}

// NewRecurringAgreementsPatchV0 creates a new http.Handler for the recurring agreements patch v0 operation
func NewRecurringAgreementsPatchV0(ctx *middleware.Context, handler RecurringAgreementsPatchV0Handler) *RecurringAgreementsPatchV0 {
	return &RecurringAgreementsPatchV0{Context: ctx, Handler: handler}
}

/*
	RecurringAgreementsPatchV0 swagger:route PATCH /v0/recurring-agreements/{agreementId} summerstudents-backend-app v0-api recurringAgreementsPatchV0

# Update recurring agreement

Given a recurrent agreement id, update the agreement
*/
type RecurringAgreementsPatchV0 struct {
	Context *middleware.Context
	Handler RecurringAgreementsPatchV0Handler
}

func (o *RecurringAgreementsPatchV0) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRecurringAgreementsPatchV0Params()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
