// Code generated by go-swagger; DO NOT EDIT.

package summerstudents_backend_app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RecurringAgreementsGetV0HandlerFunc turns a function with the right signature into a recurring agreements get v0 handler
type RecurringAgreementsGetV0HandlerFunc func(RecurringAgreementsGetV0Params) middleware.Responder

// Handle executing the request and returning a response
func (fn RecurringAgreementsGetV0HandlerFunc) Handle(params RecurringAgreementsGetV0Params) middleware.Responder {
	return fn(params)
}

// RecurringAgreementsGetV0Handler interface for that can handle valid recurring agreements get v0 params
type RecurringAgreementsGetV0Handler interface {
	Handle(RecurringAgreementsGetV0Params) middleware.Responder
}

// NewRecurringAgreementsGetV0 creates a new http.Handler for the recurring agreements get v0 operation
func NewRecurringAgreementsGetV0(ctx *middleware.Context, handler RecurringAgreementsGetV0Handler) *RecurringAgreementsGetV0 {
	return &RecurringAgreementsGetV0{Context: ctx, Handler: handler}
}

/*
	RecurringAgreementsGetV0 swagger:route GET /v0/recurring-agreements/{agreementId} summerstudents-backend-app Recurrizz v0 endpoints recurringAgreementsGetV0

# Get recurring agreement

Given a recurrent agreement id, get the agreement
*/
type RecurringAgreementsGetV0 struct {
	Context *middleware.Context
	Handler RecurringAgreementsGetV0Handler
}

func (o *RecurringAgreementsGetV0) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRecurringAgreementsGetV0Params()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
