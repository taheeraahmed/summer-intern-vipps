// Code generated by go-swagger; DO NOT EDIT.

package summerstudents_backend_app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/vippsas/summerstudents-backend/generated/models"
)

// RecurringAgreementsPatchV1OKCode is the HTTP code returned for type RecurringAgreementsPatchV1OK
const RecurringAgreementsPatchV1OKCode int = 200

/*
RecurringAgreementsPatchV1OK Success

swagger:response recurringAgreementsPatchV1OK
*/
type RecurringAgreementsPatchV1OK struct {

	/*
	  In: Body
	*/
	Payload *models.Agreement `json:"body,omitempty"`
}

// NewRecurringAgreementsPatchV1OK creates RecurringAgreementsPatchV1OK with default headers values
func NewRecurringAgreementsPatchV1OK() *RecurringAgreementsPatchV1OK {

	return &RecurringAgreementsPatchV1OK{}
}

// WithPayload adds the payload to the recurring agreements patch v1 o k response
func (o *RecurringAgreementsPatchV1OK) WithPayload(payload *models.Agreement) *RecurringAgreementsPatchV1OK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the recurring agreements patch v1 o k response
func (o *RecurringAgreementsPatchV1OK) SetPayload(payload *models.Agreement) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RecurringAgreementsPatchV1OK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RecurringAgreementsPatchV1BadRequestCode is the HTTP code returned for type RecurringAgreementsPatchV1BadRequest
const RecurringAgreementsPatchV1BadRequestCode int = 400

/*
RecurringAgreementsPatchV1BadRequest Bad request

swagger:response recurringAgreementsPatchV1BadRequest
*/
type RecurringAgreementsPatchV1BadRequest struct {
}

// NewRecurringAgreementsPatchV1BadRequest creates RecurringAgreementsPatchV1BadRequest with default headers values
func NewRecurringAgreementsPatchV1BadRequest() *RecurringAgreementsPatchV1BadRequest {

	return &RecurringAgreementsPatchV1BadRequest{}
}

// WriteResponse to the client
func (o *RecurringAgreementsPatchV1BadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// RecurringAgreementsPatchV1NotFoundCode is the HTTP code returned for type RecurringAgreementsPatchV1NotFound
const RecurringAgreementsPatchV1NotFoundCode int = 404

/*
RecurringAgreementsPatchV1NotFound Not found

swagger:response recurringAgreementsPatchV1NotFound
*/
type RecurringAgreementsPatchV1NotFound struct {
}

// NewRecurringAgreementsPatchV1NotFound creates RecurringAgreementsPatchV1NotFound with default headers values
func NewRecurringAgreementsPatchV1NotFound() *RecurringAgreementsPatchV1NotFound {

	return &RecurringAgreementsPatchV1NotFound{}
}

// WriteResponse to the client
func (o *RecurringAgreementsPatchV1NotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// RecurringAgreementsPatchV1InternalServerErrorCode is the HTTP code returned for type RecurringAgreementsPatchV1InternalServerError
const RecurringAgreementsPatchV1InternalServerErrorCode int = 500

/*
RecurringAgreementsPatchV1InternalServerError Internal server error

swagger:response recurringAgreementsPatchV1InternalServerError
*/
type RecurringAgreementsPatchV1InternalServerError struct {
}

// NewRecurringAgreementsPatchV1InternalServerError creates RecurringAgreementsPatchV1InternalServerError with default headers values
func NewRecurringAgreementsPatchV1InternalServerError() *RecurringAgreementsPatchV1InternalServerError {

	return &RecurringAgreementsPatchV1InternalServerError{}
}

// WriteResponse to the client
func (o *RecurringAgreementsPatchV1InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
