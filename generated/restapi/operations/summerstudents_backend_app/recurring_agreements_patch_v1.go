// Code generated by go-swagger; DO NOT EDIT.

package summerstudents_backend_app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RecurringAgreementsPatchV1HandlerFunc turns a function with the right signature into a recurring agreements patch v1 handler
type RecurringAgreementsPatchV1HandlerFunc func(RecurringAgreementsPatchV1Params) middleware.Responder

// Handle executing the request and returning a response
func (fn RecurringAgreementsPatchV1HandlerFunc) Handle(params RecurringAgreementsPatchV1Params) middleware.Responder {
	return fn(params)
}

// RecurringAgreementsPatchV1Handler interface for that can handle valid recurring agreements patch v1 params
type RecurringAgreementsPatchV1Handler interface {
	Handle(RecurringAgreementsPatchV1Params) middleware.Responder
}

// NewRecurringAgreementsPatchV1 creates a new http.Handler for the recurring agreements patch v1 operation
func NewRecurringAgreementsPatchV1(ctx *middleware.Context, handler RecurringAgreementsPatchV1Handler) *RecurringAgreementsPatchV1 {
	return &RecurringAgreementsPatchV1{Context: ctx, Handler: handler}
}

/*
	RecurringAgreementsPatchV1 swagger:route PATCH /v1/recurring-agreements/{agreementId} summerstudents-backend-app Recurrizz v1 endpoints recurringAgreementsPatchV1

# Update recurring agreement

Given a recurrent agreement id, update the agreement
*/
type RecurringAgreementsPatchV1 struct {
	Context *middleware.Context
	Handler RecurringAgreementsPatchV1Handler
}

func (o *RecurringAgreementsPatchV1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRecurringAgreementsPatchV1Params()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
